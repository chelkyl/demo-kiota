#!/usr/bin/env bash

# Call kiota on all test yaml files

set -e

mode="main"
lang="typescript"
results_only=0

help() {
  cat << EOF
Test kiota generation

Usage: test [OPTIONS] [#...]

Options:

  -n, --name <number>   number/name/id of the test to create
                        default: the next number after the last test in tests/
                                  starts at 1 if there are no tests

  -t, --tag <tag>       a tag value placed at the top of the test file
                        can be specified multiple times to add multiple tags

  -h, --help            show this help message then exit

  -l, --list            list all test files and the URIs within them then exit

  -c, --check           check all test files and exit with error if any tests
                        have the same set of URIs

  -s, --sort            sorts the given URIs before writing the new test file
                        in --list and --check mode, sorts each set of URIs
                        within each test before outputting/checking

  -f, --force           bypass any errors and silence warnings
                        - if the test file already exists, overwrite it
                        - if the same URIs are in another test, write the
                          new test anyway
                        - if the URIs after being sorted are in another test,
                          hide the warning

Positional Arguments:

#     a space-separated list of one or more test ids to prepare results for

Environment Variables:

kiota_main

kiota_pr

EOF
}

parsed_args=$(getopt --name "test" -o hm:l:r -l help,mode:,lang:,results-only -- "$@")
eval set -- "$parsed_args"
while :; do
  case "$1" in
    -m|--mode)
      mode="$2"
      [[ "$mode" == "main" || "$mode" == "pr" ]] || { echo "Error: mode must be 'main' or 'pr'" >&2; exit 1; }
      shift 2
      ;;
    -l|--lang)
      lang="${2,,}"
      [[ "$lang" =~ ^(cli|csharp|go|java|php|python|ruby|swift|typescript)$ ]] || { echo "Error: must provide a valid language" >&2; exit 1; }
      langs+=("$lang")
      shift 2
      ;;
    -r|--results-only)
      results_only=1
      shift 1
      ;;
    -h|--help)
      help
      exit 0
      ;;
    --)
      shift 1
      break
      ;;
    *)
      echo "Error: got $1" >&2
      exit 1
      ;;
  esac
done

kiota="$kiota_main"
if [[ "$mode" == "pr" ]]; then
  [[ -n "$kiota_pr" ]] || { echo "Error: must define kiota_pr as path to a kiota exe" >&2; exit 1; }
  kiota="$kiota_pr"
else
  [[ -n "$kiota_main" ]] || { echo "Error: must define kiota_main as path to a kiota exe" >&2; exit 1; }
fi

test_paths=()
if [[ "$#" -gt 0 ]]; then
  for test_name in "$@"; do
    if [[ -n "$test_name" ]]; then
      [[ "$test_name" =~ ^[0-9]+$ ]] || { echo "Error: test name must be a number" >&2; exit 1; }
      test_path="tests/$test_name.yaml"
      [[ -f "$test_path" ]] || { echo "Error: test does not exist: $test_path" >&2; exit 1; }
      test_paths+=("$test_path")
    fi
  done
else
  while read -r test_path || [[ -n "$test_path" ]]; do
    test_paths+=("$test_path")
  done < <(find tests/ -type f -regextype posix-extended -regex "tests/[0-9]+\.yaml" | sort -V)
fi

export KIOTA_OFFLINE_ENABLED=true KIOTA_TUTORIAL_ENABLED=false

for test_path in "${test_paths[@]}"; do
  test_file="${test_path##*/}"
  out_path="out/$mode/$lang/$test_file"
  if [[ "$results_only" -eq 0 ]]; then
    "$kiota" generate --exclude-backward-compatible --class-name "ApiSdk" --namespace-name "apiSdk" --language "$lang" --clear-cache --clean-output --output "$out_path" --openapi "$test_path"
    find "$out_path" -type f -exec dos2unix -q {} \+
  fi
  results_path="results/$mode/$lang/${test_file%\.yaml}.md"
  new_md5="$(md5sum "$test_path" | cut -d' ' -f1)"
  if [[ -f "$results_path" ]]; then
    old_md5="$(head -n 1 "$results_path" | sed -r 's/<!-- ([^ ]+) -->/\1/g')"
    if [[ -z "$old_md5" ]]; then
      echo "Warning: existing results file '$results_path' is missing an md5 checksum comment!"
    elif [[ "$old_md5" != "$new_md5" ]]; then
      echo "Warning: existing results file '$results_path' has a different checksum and needs review!"
    fi
  else
    results_path_parent="${results_path%/*}"
    mkdir -p "$results_path_parent"
    printf '<!-- %s -->\n\n?\n\n...\n' "$new_md5" > "$results_path"
  fi
done
