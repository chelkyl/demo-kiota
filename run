#!/usr/bin/env bash

# Call kiota on all test yaml files and generate result stubs

ROOT_DIR="$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &>/dev/null && pwd)"
tests_dir="./tests"
results_dir="./results"
generate_dir="./out"
if [[ -n "$WORKSPACE" ]]; then
  tests_dir="$ROOT_DIR/spaces/$WORKSPACE/$tests_dir"
  results_dir="$ROOT_DIR/spaces/$WORKSPACE/$results_dir"
  generate_dir="$ROOT_DIR/spaces/$WORKSPACE/$generate_dir"
fi

mode="main"
lang="typescript"
results_only=0

help() {
  cat << EOF
Run tests of kiota generation

Usage: run [OPTIONS] [#...]

Options:

  -m, --mode <mode>     "main" or "pr"
                        run with the variant of kiota specified by
                        the "kiota_main" or "kiota_pr" environment variables
                        default: main

  -l, --lang <lang>     the language to use when calling kiota
                        default: typescript
                        options:
                          cli
                          csharp
                          go
                          java
                          php
                          python
                          ruby
                          swift
                          typescript

  -h, --help            show this help message then exit

  -r, --results-only    only generate result stubs without also running kiota

Positional Arguments:

#     a space-separated list of one or more test ids to run kiota for
      defaults to all tests

Environment Variables:

kiota_main   the path to the kiota binary to call when mode is "main"
             default: kiota_main

kiota_pr     the path to the kiota binary to call when mode is "pr"
             default: kiota_pr

EOF
}

parsed_args=$(getopt --name "run" -o hm:l:r -l help,mode:,lang:,results-only -- "$@")
eval set -- "$parsed_args"
while :; do
  case "$1" in
    -m|--mode)
      mode="$2"
      [[ "$mode" == "main" || "$mode" == "pr" ]] || { echo "Error: mode must be 'main' or 'pr'" >&2; exit 1; }
      shift 2
      ;;
    -l|--lang)
      lang="${2,,}"
      [[ "$lang" =~ ^(cli|csharp|go|java|php|python|ruby|swift|typescript)$ ]] || { echo "Error: must provide a valid language" >&2; exit 1; }
      langs+=("$lang")
      shift 2
      ;;
    -r|--results-only)
      results_only=1
      shift 1
      ;;
    -h|--help)
      help
      exit 0
      ;;
    --)
      shift 1
      break
      ;;
    *)
      echo "Error: got $1" >&2
      exit 1
      ;;
  esac
done

kiota="${kiota_main:-"kiota_main"}"
if [[ "$mode" == "pr" ]]; then
  kiota="${kiota_pr:-"kiota_pr"}"
fi

test_paths=()
if [[ "$#" -gt 0 ]]; then
  for test_name in "$@"; do
    if [[ -n "$test_name" ]]; then
      [[ "$test_name" =~ ^[0-9]+$ ]] || { echo "Error: test name must be a number" >&2; exit 1; }
      test_path="$tests_dir/$test_name.yaml"
      [[ -f "$test_path" ]] || { echo "Error: test does not exist: $test_path" >&2; exit 1; }
      test_paths+=("$test_path")
    fi
  done
else
  while read -r test_path || [[ -n "$test_path" ]]; do
    test_paths+=("$test_path")
  done < <(find "$tests_dir" -type f -regextype posix-extended -regex ".*/tests/[0-9]+\.yaml" | sort -V)
fi

export KIOTA_OFFLINE_ENABLED=true KIOTA_TUTORIAL_ENABLED=false

for test_path in "${test_paths[@]}"; do
  test_file="${test_path##*/}"
  out_path="$generate_dir/$mode/$lang/$test_file"
  if [[ "$results_only" -eq 0 ]]; then
    if ! "$kiota" generate --exclude-backward-compatible --class-name "ApiSdk" --namespace-name "apiSdk" --language "$lang" --clear-cache --clean-output --output "$out_path" --openapi "$test_path"; then
      echo "Error: failed calling $kiota on $test_path" >&2
      exit 1
    fi
    find "$out_path" -type f -exec dos2unix -q {} \+
  fi
  results_path="$results_dir/$mode/$lang/${test_file%\.yaml}.md"
  new_md5="$(md5sum "$test_path" | cut -d' ' -f1)"
  if [[ -f "$results_path" ]]; then
    old_md5="$(head -n 1 "$results_path" | sed -r 's/<!-- ([^ ]+) -->/\1/g')"
    if [[ -z "$old_md5" ]]; then
      echo "Warning: existing results file '$results_path' is missing an md5 checksum comment!"
    elif [[ "$old_md5" != "$new_md5" ]]; then
      echo "Warning: existing results file '$results_path' has a different checksum (test may have changed) and needs review!"
    fi
  else
    results_path_parent="${results_path%/*}"
    mkdir -p "$results_path_parent"
    printf '<!-- %s -->\n<!--\n%s\n-->\n\n?\n\n...\n' "$new_md5" "$(sed -rn "/^paths:/,$ s/^  ([^: ]+):$/\1/p" "$test_path")" > "$results_path"
  fi
done
