#!/usr/bin/env bash

# Prepare a test run report

ROOT_DIR="$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &>/dev/null && pwd)"
tests_dir="./tests"
results_dir="./results"
generate_dir="./out"
if [[ -n "$WORKSPACE" ]]; then
  tests_dir="$ROOT_DIR/spaces/$WORKSPACE/$tests_dir"
  results_dir="$ROOT_DIR/spaces/$WORKSPACE/$results_dir"
  generate_dir="$ROOT_DIR/spaces/$WORKSPACE/$generate_dir"
fi

# file to write to
out_file="./report_template.md"
if [[ -n "$WORKSPACE" ]]; then
  out_file="$ROOT_DIR/spaces/$WORKSPACE/report_template.md"
fi
# 1 - include main column for each lang
# 2 - include pr column for each lang
# 3 - include both
ADD_MAIN=1
ADD_PR=2
with_source=0
# tree - include file tree (ascii) for main/pr and each lang
# html - render as html
# blank - skip
with_tree=
# 1 - include output extracts for main/pr and each lang
# 0 - skip
with_extracts=0
# 1 - only include test results that are error/strange for main/pr and each lang
# 0 - include all results
only_highlights=0
# lang - group result columns by lang
# source - group result columns by result source
with_group=lang
# langs to create result columns for
langs=()
# used for display in report
relative_tests_dir="./tests"
relative_generate_dir="./out"

declare -rA LANG_MAP=(\
  ["cli"]="CLI"       \
  ["csharp"]="C#"     \
  ["go"]="Go"         \
  ["java"]="Java"     \
  ["php"]="PHP"       \
  ["python"]="Python" \
  ["ruby"]="Ruby"     \
  ["swift"]="Swift"   \
  ["typescript"]="TS" \
)

help() {
  cat << EOF
Prepare report files

Usage: prep [OPTIONS] [#...]

Options:

  -o, --output <path>   file path to write results to
                        default: $out_file

  -h, --help            show this help message then exit

  -l, --lang <lang>     a language to prepare the report for
                        can be specified multiple times
                        default: typescript, python
                        options:
                          cli
                          csharp
                          go
                          java
                          php
                          python
                          ruby
                          swift
                          typescript

  -g, --group <by>      group result columns by "lang" or by "source"
                        eg. given L1 is language 1, S1 is source 1, etc
                        using "lang" will output something like
                          | L1 S1 | L1 S2 | L2 S1 | L2 S2 |
                        using "source" will output something like
                          | L1 S1 | L2 S1 | L1 S2 | L2 S2 |
                        default: lang

  -d, --header <path>   use the given file's contents as the report header
                        default: no header

  -n, --main            prepare report using output generated using the
                        main branch of kiota
                        can be specified in addition to --pr
                        default: main only

  -p, --pr              prepare report using output generated using the
                        feature branch of kiota
                        can be specified in addition to --main

  -t, --tree <mode>     "ascii" or "html" or ""
                        "" will skip file tree inclusion in the report
                        "ascii" will include an ascii file tree
                        "html" will format the file tree as html
                        default: ""

  -e, --extracts        add auto-generated extracts of the kiota output
                        in the file tree
                        must be passed with --tree "tree" or --tree "html"
                        default: no extracts

  -i, --only-highlights only include entries that are not marked as 'error' or 'strange'
                        default: report all results

Positional Arguments:

#     a space-separated list of one or more test ids to prepare results for

EOF
}

parsed_args=$(getopt --name "prep" -o ho:l:g:d:npt:ei -l help,output:,lang:,group:,header:,main,pr,tree:,extracts,only-highlights -- "$@")
eval set -- "$parsed_args"
while :; do
  case "$1" in
    -o|--output)
      out_file="$2"
      shift 2
      ;;
    -l|--lang)
      lang="${2,,}"
      grep -q -E "^($(echo "${!LANG_MAP[@]}" | tr ' ' '|'))$" <<< "$lang" || { echo "Error: must provide a valid language" >&2; exit 1; }
      langs+=("$lang")
      shift 2
      ;;
    -g|--group)
      with_group="$2"
      [[ "$with_group" == "lang" || "$with_group" == "source" ]] || { echo "Error: group must be 'lang' or 'source'" >&2; exit 1; }
      shift 2
      ;;
    -d|--header)
      with_header_file="$2"
      [[ -f "$with_header_file" ]] || { echo "Error: header file '$with_header_file' does not exist" >&2; exit 1; }
      shift 2
      ;;
    -n|--main)
      with_source=$((with_source | ADD_MAIN))
      shift 1
      ;;
    -p|--pr)
      with_source=$((with_source | ADD_PR))
      shift 1
      ;;
    -t|--tree)
      with_tree="${2:-html}"
      [[ "$with_tree" == "ascii" || "$with_tree" == "html" ]] || { echo "Error: tree mode must be 'ascii' or 'html'" >&2; exit 1; }
      shift 2
      ;;
    -e|--extracts)
      with_extracts=1
      shift 1
      ;;
    -i|--only-highlights)
      only_highlights=1
      shift 1
      ;;
    -h|--help)
      help
      exit 0
      ;;
    --)
      shift 1
      break
      ;;
    *)
      echo "Error: got $1" >&2
      exit 1
      ;;
  esac
done

test_names=()
if [[ "$#" -eq 0 ]]; then
  while read -r test_path || [[ -n "$test_path" ]]; do
    test_file="${test_path##*/}"
    test_name="${test_file%\.yaml}"
    test_names+=("$test_name")
  done < <(find "$tests_dir" -type f -regextype posix-extended -regex ".*/tests/[0-9]+\.yaml" | sort -V)
else
  for test_name in "$@"; do
    [[ "$test_name" =~ ^[0-9]+$ ]] || { echo "Error: test name must be a number" >&2; exit 1; }
    test_path="$tests_dir/$test_name.yaml"
    [[ -f "$test_path" ]] || { echo "Error: test does not exist: $test_path" >&2; exit 1; }
    test_names+=("$test_name")
  done
fi

if [[ "${#langs[@]}" -eq 0 ]]; then
  langs+=("typescript" "python")
fi

[[ "$with_source" == 0 ]] && with_source="$ADD_MAIN"
result_sources=()
if [[ $((with_source & ADD_MAIN)) == "$ADD_MAIN" ]]; then
  result_sources+=("main")
fi
if [[ $((with_source & ADD_PR)) == "$ADD_PR" ]]; then
  result_sources+=("pr")
fi

write_header_result_column() {
  # globals: LANG_MAP
  # caller: lang result_source
  printf '      <th>%s kiota %s Results</th>\n' "${LANG_MAP[$lang]}" "$result_source"
}

write_header_result_columns() {
  # globals: with_group langs result_sources
  if [[ "$with_group" == "lang" ]]; then
    for lang in "${langs[@]}"; do
      for result_source in "${result_sources[@]}"; do
        write_header_result_column
      done
    done
  else
    for result_source in "${result_sources[@]}"; do
      for lang in "${langs[@]}"; do
        write_header_result_column
      done
    done
  fi
}

write_header() {
  printf '  <thead>\n'
  printf '    <tr>\n'
  printf '      <th>Test URI Paths</th>\n'
  write_header_result_columns
  printf '    </tr>\n'
  printf '  </thead>\n'
}

write_result_column_with_extracts() {
  # globals: ROOT_DIR with_tree
  # caller: result_source lang test_file
  # reads from stdin
  local extracts_writer="$ROOT_DIR/writers/$lang"
  if [[ ! -x "$extracts_writer" ]]; then
    cat
    return 0
  fi
  local original_lines=()
  local result_lines=()
  local left=""
  local right=""
  local max_left=0
  local is_first=1
  while IFS= read -r line || [[ -n "$line" ]]; do
    while mapfile -t -n 2 left_and_right && ((${#left_and_right[@]})); do
      left="${left_and_right[0]}"
      right="${left_and_right[1]}"
      if [[ "$is_first" == 0 ]]; then
        [[ "${#left}" -gt "$max_left" ]] && max_left="${#left}"
      else
        is_first=0
        [[ "$with_tree" == "ascii" ]] && left="<a href=\"$left\">$left</a>"
      fi
      original_lines+=("$left")
      result_lines+=("$right")
    done < <(with_tree="$with_tree" result_source="$result_source" lang="$lang" test_file="$test_file" "$extracts_writer" "$line")
  done

  local padding_str="\u00A0"
  [[ "$with_tree" == "html" ]] && padding_str="&nbsp;"
  local end_str=""
  [[ "$with_tree" == "html" ]] && end_str="<br>"
  local padding=
  local i=
  local x=
  max_left=$((max_left + 4))
  for ((i=0; i<${#original_lines[@]}; i++)); do
    left="${original_lines[$i]}"
    right="${result_lines[$i]}"
    padding=""
    for ((x=${#left};x<max_left;x++)); do
      padding+="$padding_str"
    done
    printf '%s%b%s%s\n' "$left" "$padding" "$right" "$end_str"
  done
}

warned_extracts_writer=0
write_result_column() {
  # globals: ROOT_DIR generate_dir relative_generate_dir results_dir warned_extracts_writer with_extracts with_tree
  # caller: result_source lang test_file
  printf '      <td valign="top">\n'
  local result_path="$results_dir/$result_source/$lang/${test_file%\.yaml}.md"
  local result_summary=""
  local result_body=""
  if [[ -f "$result_path" ]]; then
    result_summary="$(awk -f "$ROOT_DIR/writers/get_result_summary.awk" "$result_path" | sed -r -e 's/^ok ?/‚úÖ/' -e 's/^error ?/üö´/' -e 's/^strange ?/‚ö†Ô∏è/')"
    result_body="$(awk -f "$ROOT_DIR/writers/get_result_body.awk" "$result_path" | xargs -d '\n' printf '\n          %s<br>')"
  fi
  printf '        <p>\n          Result:&nbsp;%s<br>%s\n        </p>\n' "$result_summary" "$result_body"
  local tree_writer_wrapper=cat
  if [[ "$with_extracts" -eq 1 ]]; then
    tree_writer_wrapper=write_result_column_with_extracts
    # extracts_writer is unused and is only for checking that it exists
    # it will be determined and used in write_result_column_with_extracts
    local extracts_writer="$ROOT_DIR/writers/$lang"
    if [[ ! -x "$extracts_writer" && "$warned_extracts_writer" -eq 0 ]]; then
      echo "Warning: $extracts_writer does not exist or is not executable, extracts will not be included" >&2
      warned_extracts_writer=1
    fi
  fi
  if [[ -n "$with_tree" ]]; then
    [[ "$with_tree" == "ascii" ]] && printf '        <pre>\n'
    tree -I 'models' -I 'kiota-lock.json' --filesfirst -n -H "$relative_generate_dir/$result_source/$lang/$test_file" "$generate_dir/$result_source/$lang/$test_file" \
      | awk '/<body>/ { do_print=1; getline; next; }; /<br><br><p>/ { do_print=0; }; do_print;' \
      | sed -r -e 's,//,/,g' \
            -e 's,‚îÄ‚îÄ,‚îÄ,g' \
            -e 's/‚îÄ /‚îÄ\&nbsp;/g' \
            -e 's/\&nbsp; /\&nbsp;\&nbsp;/g' \
            -e 's/<br>$//' \
      | "$tree_writer_wrapper" \
      | sed -r 's/\t//g'
    [[ "$with_tree" == "ascii" ]] && printf '</pre>\n'
  fi
  printf '      </td>\n'
}

write_row() {
  # globals: ROOT_DIR langs result_sources results_dir with_group only_highlights
  # caller: test_file test_path relative_test_path
  local lang=""
  local result_source=""
  if [[ "$only_highlights" -eq 1 ]]; then
    local has_highlight=0
    for lang in "${langs[@]}"; do
      if [[ "$has_highlight" -eq 1 ]]; then
        break
      fi
      for result_source in "${result_sources[@]}"; do
        local result_path="$results_dir/$result_source/$lang/${test_file%\.yaml}.md"
        if [[ -f "$result_path" ]] && ! awk -f "$ROOT_DIR/writers/get_result_summary.awk" "$result_path" | grep -cq 'ok'; then
          has_highlight=1
          break
        fi
      done
    done
    if [[ "$has_highlight" -eq 0 ]]; then
      return
    fi
  fi

  printf '    <tr>\n'

  printf '      <td valign="top">\n'
  printf '        <p>\n'
  printf '          File:&nbsp;<a href="%s">%s</a><br>\n' "${relative_test_path}" "${test_file}"
  # shellcheck disable=SC2046
  printf '          %s<br>\n' $(sed -rn "/^paths:/,$ s/^  ([^: ]+):$/  \1/p" "$test_path")
  printf '        </p>\n'
  printf '      </td>\n'

  if [[ "$with_group" == "lang" ]]; then
    for lang in "${langs[@]}"; do
      for result_source in "${result_sources[@]}"; do
        write_result_column
      done
    done
  else
    for result_source in "${result_sources[@]}"; do
      for lang in "${langs[@]}"; do
        write_result_column
      done
    done
  fi

  printf '    </tr>\n'
}

write_body() {
  # globals: test_names tests_dir relative_tests_dir
  printf '  <tbody>\n'

  local test_name=""
  local relative_test_path=""
  local test_path=""
  local test_file=""
  for test_name in "${test_names[@]}"; do
    relative_test_path="$relative_tests_dir/$test_name.yaml"
    test_path="$tests_dir/$test_name.yaml"
    test_file="$test_name.yaml"
    write_row
  done

  printf '  </tbody>\n'
}

write_kiota_version() {
  # globals: ADD_MAIN ADD_PR kiota_main kiota_pr
  printf '\nEvaluating output generated by:\n\n```\n'
  if [[ $((with_source & ADD_MAIN)) == "$ADD_MAIN" ]]; then
    printf 'kiota main: %s\n' "$("${kiota_main:-"kiota_main"}" --version)"
  fi
  if [[ $((with_source & ADD_PR)) == "$ADD_PR" ]]; then
    printf 'kiota pr: %s\n' "$("${kiota_pr:-"kiota_pr"}" --version)"
  fi
  printf '```\n\n'
}

write_table() {
  printf '<table>\n'

  write_header
  write_body

  printf '</table>\n'
}

: > "$out_file"
if [[ -n "$with_header_file" ]]; then
  cat "$with_header_file" >> "$out_file"
fi
write_kiota_version >> "$out_file"
write_table >> "$out_file"
