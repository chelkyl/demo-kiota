#!/usr/bin/env bash

# Prepare a test run report

set -e

# basic or full
mode="basic"
# file to write to
out_file="report_template.md"
# 1 - include main column for each lang
# 2 - include pr column for each lang
# 3 - include both
ADD_MAIN=1
ADD_PR=2
with_source=0
# tree - include file tree (ascii) for main/pr and each lang
# html - render as html
# blank - skip
with_tree=
# 1 - include test results for main/pr and each lang
# 0 - skip
with_auto_results=0
# lang - group result columns by lang
# source - group result columns by result source
with_group=lang
# langs to create result columns for
langs=()

declare -rA LANG_MAP=(\
  ["cli"]="CLI"       \
  ["csharp"]="C#"     \
  ["go"]="Go"         \
  ["java"]="Java"     \
  ["php"]="PHP"       \
  ["python"]="Python" \
  ["ruby"]="Ruby"     \
  ["swift"]="Swift"   \
  ["typescript"]="TS" \
)

help() {
  cat << EOF
Prepare report files

Usage: prep [OPTIONS] [#...]

Options:

  -n, --name <number>   number/name/id of the test to create
                        default: the next number after the last test in tests/
                                  starts at 1 if there are no tests

  -t, --tag <tag>       a tag value placed at the top of the test file
                        can be specified multiple times to add multiple tags

  -h, --help            show this help message then exit

  -l, --list            list all test files and the URIs within them then exit

  -c, --check           check all test files and exit with error if any tests
                        have the same set of URIs

  -s, --sort            sorts the given URIs before writing the new test file
                        in --list and --check mode, sorts each set of URIs
                        within each test before outputting/checking

  -f, --force           bypass any errors and silence warnings
                        - if the test file already exists, overwrite it
                        - if the same URIs are in another test, write the
                          new test anyway
                        - if the URIs after being sorted are in another test,
                          hide the warning

Positional Arguments:

#     a space-separated list of one or more test ids to prepare results for

EOF
}

parsed_args=$(getopt --name "prep" -o hm:o:l:g:d:npt::r -l help,mode:,output:,lang:,group:,header:,main,pr,tree::,results -- "$@")
eval set -- "$parsed_args"
while :; do
  case "$1" in
    -m|--mode)
      mode="$2"
      [[ "$mode" == "basic" || "$mode" == "full" ]] || { echo "Error: mode must be 'basic' or 'full'" >&2; exit 1; }
      shift 2
      ;;
    -o|--output)
      out_file="$2"
      shift 2
      ;;
    -l|--lang)
      lang="${2,,}"
      grep -q -E "^($(echo "${!LANG_MAP[@]}" | tr ' ' '|'))$" <<< "$lang" || { echo "Error: must provide a valid language" >&2; exit 1; }
      langs+=("$lang")
      shift 2
      ;;
    -g|--group)
      with_group="$2"
      [[ "$with_group" == "lang" || "$with_group" == "source" ]] || { echo "Error: group must be 'lang' or 'source'" >&2; exit 1; }
      shift 2
      ;;
    -d|--header)
      with_header_file="$2"
      [[ -f "$with_header_file" ]] || { echo "Error: header file '$with_header_file' does not exist" >&2; exit 1; }
      shift 2
      ;;
    -n|--main)
      with_source=$((with_source | ADD_MAIN))
      shift 1
      ;;
    -p|--pr)
      with_source=$((with_source | ADD_PR))
      shift 1
      ;;
    -t|--tree)
      with_tree="${2:-html}"
      [[ "$with_tree" == "ascii" || "$with_tree" == "html" ]] || { echo "Error: tree mode must be 'ascii' or 'html'" >&2; exit 1; }
      shift 2
      ;;
    -r|--results)
      with_auto_results=1
      shift 1
      ;;
    -h|--help)
      help
      exit 0
      ;;
    --)
      shift 1
      break
      ;;
    *)
      echo "Error: got $1" >&2
      exit 1
      ;;
  esac
done

test_names=()
if [[ "$#" -eq 0 ]]; then
  while read -r test_path || [[ -n "$test_path" ]]; do
    test_file="${test_path#*/}"
    test_name="${test_file%\.yaml}"
    test_names+=("$test_name")
  done < <(find tests/ -type f -regextype posix-extended -regex "tests/[0-9]+\.yaml" | sort -V)
else
  for test_name in "$@"; do
    [[ "$test_name" =~ ^[0-9]+$ ]] || { echo "Error: test name must be a number" >&2; exit 1; }
    test_path="tests/$test_name.yaml"
    [[ -f "$test_path" ]] || { echo "Error: test does not exist: $test_path" >&2; exit 1; }
    test_names+=("$test_name")
  done
fi

if [[ "${#langs[@]}" -eq 0 ]]; then
  langs+=("typescript" "python")
fi

[[ "$with_source" == 0 ]] && with_source="$ADD_MAIN"
result_sources=()
if [[ $((with_source & ADD_MAIN)) == "$ADD_MAIN" ]]; then
  result_sources+=("main")
fi
if [[ $((with_source & ADD_PR)) == "$ADD_PR" ]]; then
  result_sources+=("pr")
fi

write_header_result_column() {
  printf '      <th>%s kiota %s Results</th>\n' "${LANG_MAP[$lang]}" "$result_source"
}

write_header_result_columns() {
  if [[ "$with_group" == "lang" ]]; then
    for lang in "${langs[@]}"; do
      for result_source in "${result_sources[@]}"; do
        write_header_result_column
      done
    done
  else
    for result_source in "${result_sources[@]}"; do
      for lang in "${langs[@]}"; do
        write_header_result_column
      done
    done
  fi
}

write_header() {
  printf '  <thead>\n'
  printf '    <tr>\n'
  printf '      <th>Test URI Paths</th>\n'
  write_header_result_columns
  printf '    </tr>\n'
  printf '  </thead>\n'
}

write_result_column_with_results() {
  # globals: with_tree result_source lang test_file
  # reads from stdin
  local result_writer="writers/$lang"
  if [[ ! -x "$result_writer" ]]; then
    cat
    return 0
  fi
  local original_lines=()
  local result_lines=()
  local left=""
  local right=""
  local max_left=0
  local is_first=1
  while IFS= read -r line || [[ -n "$line" ]]; do
    while mapfile -t -n 2 left_and_right && ((${#left_and_right[@]})); do
      left="${left_and_right[0]}"
      right="${left_and_right[1]}"
      original_lines+=("$left")
      result_lines+=("$right")
      if [[ "$is_first" == 0 ]]; then
        [[ "${#left}" -gt "$max_left" ]] && max_left="${#left}"
      else
        is_first=0
      fi
    done < <(with_tree="$with_tree" result_source="$result_source" lang="$lang" test_file="$test_file" "$result_writer" "$line")
  done

  local padding_str="\u00A0"
  [[ "$with_tree" == "html" ]] && padding_str="&nbsp;"
  local padding=
  local i=
  local x=
  max_left=$((max_left + 4))
  for ((i=0; i<${#original_lines[@]}; i++)); do
    left="${original_lines[$i]}"
    right="${result_lines[$i]}"
    padding=""
    for ((x=${#left};x<max_left;x++)); do
      padding+="$padding_str"
    done
    printf '%s%b%s\n' "$left" "$padding" "$right"
  done
}

warned_result_writer=0
write_result_column() {
  # globals: with_auto_results with_tree result_source lang test_file
  printf '      <td valign="top">\n'
  result_path="results/$result_source/$lang/${test_file%\.yaml}.md"
  result_summary=""
  result_body=""
  if [[ -f "$result_path" ]]; then
    # TODO: maybe use emojis for glanceability? ‚úÖ ‚ö†Ô∏è üö´
    result_summary="$(head -n 3 "$result_path" | tail -n 1)"
    result_body="$(tail -n +5 "$result_path" | xargs printf '\n          %s<br>')"
  fi
  printf '        <p>\n          Result:&nbsp;%s<br>%s\n        </p>\n' "$result_summary" "$result_body"
  local result_writer_wrapper=cat
  if [[ "$with_auto_results" -eq 1 ]]; then
    result_writer_wrapper=write_result_column_with_results
    local result_writer="writers/$lang"
    if [[ ! -x "$result_writer" && "$warned_result_writer" -eq 0 ]]; then
      echo "Warning: $result_writer does not exist or is not executable, auto-results will not be included" >&2
      warned_result_writer=1
    fi
  fi
  [[ "$with_tree" == "ascii" ]] && printf '        <pre>\n'
  tree -I 'models' -I 'kiota-lock.json' --filesfirst -n -H "out/$result_source/$lang/$test_file" "out/$result_source/$lang/$test_file" \
    | sed -rn '/<body>/,/<br><br><p>/ p' \
    | tail -n +3 \
    | head -n '-1' \
    | sed -r -e 's,//,/,g' \
          -e 's,‚îÄ‚îÄ,‚îÄ,g' \
          -e 's/‚îÄ /‚îÄ\&nbsp;/g' \
          -e 's/\&nbsp; /\&nbsp;\&nbsp;/g' \
    | "$result_writer_wrapper" \
    | sed -r 's/\t//g'
  [[ "$with_tree" == "ascii" ]] && printf '</pre>\n'
  # case "$with_tree" in
  #   "ascii")
  #     printf '        <pre>\n'
  #     tree -I 'models' -I 'kiota-lock.json' --filesfirst "out/$result_source/$lang/$test_file" | head -n '-2' | "$result_writer_wrapper"
  #     printf '</pre>\n'
  #     ;;
  #   "html")
  #     tree -I 'models' -I 'kiota-lock.json' --filesfirst -n -H "out/$result_source/$lang/$test_file" "out/$result_source/$lang/$test_file" \
  #       | sed -rn '/<body>/,/<br><br><p>/ p' \
  #       | tail -n +3 \
  #       | head -n '-1' \
  #       | sed -e 's,//,/,g' \
  #             -e 's,‚îÄ‚îÄ,‚îÄ,g' \
  #             -e 's/‚îÄ /‚îÄ\&nbsp;/g' \
  #             -e 's/\&nbsp; /\&nbsp;\&nbsp;/g' \
  #       | "$result_writer_wrapper"
  #     ;;
  # esac
  printf '      </td>\n'
}

write_row() {
  printf '    <tr>\n'

  printf '      <td valign="top">\n'
  printf '        <p>\n'
  printf '          File:&nbsp;<a href="%s">%s</a><br>\n' "${test_path}" "${test_file}"
  # shellcheck disable=SC2046
  printf '          %s<br>\n' $(sed -rn "/^paths:/,$ s/^  ([^: ]+):$/  \1/p" "$test_path")
  printf '        </p>\n'
  printf '      </td>\n'

  if [[ "$with_group" == "lang" ]]; then
    for lang in "${langs[@]}"; do
      for result_source in "${result_sources[@]}"; do
        write_result_column
      done
    done
  else
    for result_source in "${result_sources[@]}"; do
      for lang in "${langs[@]}"; do
        write_result_column
      done
    done
  fi

  printf '    </tr>\n'
}

write_body() {
  printf '  <tbody>\n'

  for test_name in "${test_names[@]}"; do
    test_path="tests/$test_name.yaml"
    test_file="$test_name.yaml"
    write_row
  done

  printf '  </tbody>\n'
}

write_table() {
  printf '<table>\n'

  write_header
  write_body

  printf '</table>\n'
}

: > "$out_file"
if [[ -n "$with_header_file" ]]; then
  cat "$with_header_file" >> "$out_file"
fi
write_table >> "$out_file"
