#!/usr/bin/env bash

# Create a test yaml file

test_name=""
force=0
list_only=0
tags=()

parsed_args=$(getopt --name "create" -o n:t:lf -l name:,tag:,list,force -- "$@")
eval set -- "$parsed_args"
while :; do
  case "$1" in
    -n|--name)
      test_name="$2"
      [[ "$test_name" =~ ^\d+$ ]] || { echo "Error: test name must be a number" >&2; exit 1; }
      shift 2
      ;;
    -t|--tag)
      tags+=("$2")
      shift 2
      ;;
    -l|--list)
      list_only=1
      shift 1
      ;;
    -f|--force)
      force=1
      shift 1
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Error: got $1" >&2
      exit 1
      ;;
  esac
done

[[ $# -gt 0 ]] || { echo "Error: missing paths for test" >&2; exit 1; }

declare -A all_tests
all_tests_ordered=()
while read -r old_test_path || [[ -n "$old_test_path" ]]; do
  old_test_file="${old_test_path#*/}"
  all_tests_ordered+=("$old_test_file")
  all_tests["$old_test_file"]="$(sed -rn "/^paths:/,$ s/^  ([^: ]+):$/\1/p" "$old_test_path" | sort)"
done < <(find tests/ -type f -regextype posix-extended -regex "tests/[0-9]+\.yaml" | sort -V)

if [[ "$list_only" -eq 1 ]]; then
  for old_test_file in "${all_tests_ordered[@]}"; do
    old_test="${all_tests[$old_test_file]}"
    printf "%s\n" "$old_test_file"
    printf "%s\n\n" "$old_test"
  done
  exit 0
fi

if [[ -z "$test_name" ]]; then
  last_test="$(find tests/ -type f -regextype posix-extended -regex "tests/[0-9]+\.yaml" | sort -Vr | sed -rn '1 s,tests/([0-9]+)\.yaml,\1,p')"
  [[ -n "$last_test" ]] || last_test=0
  test_name=$((last_test + 1))
fi

test_path="tests/$test_name.yaml"
if [[ -f "$test_path" && "$force" -ne 1 ]]; then
  echo "Error: $test_path already exists" >&2
  exit 1
fi


new_test=$(echo $* | tr ' ' '\n' | sort)

for old_test_file in "${all_tests_ordered[@]}"; do
  old_test="${all_tests[$old_test_file]}"
  if [[ "$old_test" == "$new_test" ]]; then
    if [[ "$force" -ne 1 ]]; then
      echo "Error: the given test already exists at '$old_test_file'" >&2
      exit 1
    else
      echo "Warning: the given test already exists at '$old_test_file', continuing anyway" >&2
    fi
  fi
done

cat << EOF > "$test_path"
openapi: 3.0.0
info:
  title: Sample API
  description: A sample API that uses trailing slashes.
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
paths:
EOF

i=1
for uri in "$@"; do
  cat << EOF >> "$test_path"
  $uri:
    get:
      summary: Summary $i
      description: Description $i
      responses:
        "200":
          description: Response description $i
          content:
            text/plain:
              schema:
                type: string
EOF
  i=$((i + 1))
done

echo "Created: $test_path"
